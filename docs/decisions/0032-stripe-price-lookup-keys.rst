0032. Transition from Stripe Price IDs to Lookup Keys
====================================================

Status
------

Accepted

Context
-------

Previously, the enterprise-access service used Stripe Price IDs for self-service purchasing (SSP)
configuration and validation. Price IDs are generated by Stripe, and notably, they **change** every time
somebody changes the price record or any metadata about the price (e.g. frequency, name, etc.).
Consistency across environments is an added benefit.

Stripe provides lookup keys as a stable, human-readable alternative to Price IDs. Lookup keys:

* Are defined by the developer, not auto-generated by Stripe
* Remain consistent across environments
* Are more readable and maintainable in configuration files
* Allow for easier price management in multi-environment deployments

The SSP system needed to transition from relying on Price IDs in configuration to using lookup keys while maintaining the same validation and pricing functionality.

Decision
--------

We will transition the SSP pricing system to use Stripe lookup keys instead of Price IDs as the primary identifier for pricing configuration.

**Architecture Changes:**

1. **Configuration Structure**: Update ``SSP_PRODUCTS`` setting to include ``lookup_key`` field alongside deprecated ``stripe_price_id``

2. **Stripe Integration**: Create ``get_all_stripe_prices()`` function that fetches all active Stripe prices and maps them by lookup key

3. **Pricing API**: Update ``get_ssp_product_pricing()`` to use lookup keys internally, validating that configured lookup keys exist in Stripe

4. **Validation Layer**: Both price and quantity validation functions use ``get_ssp_product_pricing()`` for consistent data access

**Implementation Details:**

* **Immediate cutover**: No backward compatibility period required
* **Error handling**: Fail loudly if lookup key doesn't match any active Stripe price  
* **Quantity ranges**: Remain in ``SSP_PRODUCTS`` configuration
* **Caching**: Individual price caching maintained, plus new cache for all prices by lookup key
* **Scope**: Fetch all active Stripe prices (no filtering by pattern)

**Function Responsibilities:**

* ``get_all_stripe_prices()``: Fetches ALL active prices, returns lookup_key -> price_data mapping
* ``get_ssp_product_pricing()``: Filters to SSP-configured products, adds quantity ranges, validates existence
* Both validation functions in ``api.py`` use ``get_ssp_product_pricing()`` for efficiency

Consequences
------------

**Positive:**

* **Environment consistency**: Lookup keys work the same across test/production environments
* **Configuration clarity**: Human-readable identifiers in configuration files
* **Operational simplicity**: No need to update Price IDs when recreating Stripe resources
* **Validation integrity**: System validates against live Stripe data instead of static configuration
* **Performance optimization**: Both validation functions use same data source, reducing redundant API calls

**Negative:**

* **Dependency on Stripe API**: System now requires Stripe API calls during validation (mitigated by caching)
* **Migration overhead**: All environments need updated configuration with lookup keys

**Risks Mitigated:**

* **Missing lookup keys**: Prices without lookup keys are skipped with warnings
* **Invalid configuration**: System fails loudly if configured lookup key doesn't exist in Stripe
* **API failures**: Error handling and logging for Stripe API issues
